"use client";

import { useEffect, useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import Dashboard from "@/components/Dashboard";
import { useAuth } from '@/contexts/AuthContext';
import { useApiData } from '@/hooks/useApiData';
import { fetchMainPageData } from '@/utils/mainApiUtils';

export default function Home() {
  const router = useRouter();
  const { user, isLoading } = useAuth();
  const [isInitializing, setIsInitializing] = useState(true);
  const [hasInitialized, setHasInitialized] = useState(false); // Ï§ëÎ≥µ ÏöîÏ≤≠ Î∞©ÏßÄ
  const [queryId, setQueryId] = useState<number | undefined>(undefined);
  const apiData = useApiData();

  // SPA URL Ìï∏Îì§ÎßÅ: JavaScriptÎ°ú URL Î≥ÄÍ≤Ω Í∞êÏßÄ Î∞è Ï≤òÎ¶¨
  const handleUrlChange = useCallback(() => {
    if (typeof window !== 'undefined') {
      const path = window.location.pathname;
      console.log('üåê URL changed - pathname:', path);
      const queryMatch = path.match(/^\/query\/(\d+)\/?$/);
      console.log('üîç Query match:', queryMatch);
      if (queryMatch) {
        const id = parseInt(queryMatch[1]);
        console.log('‚úÖ Extracted queryId:', id);
        setQueryId(id);
      } else {
        console.log('‚ùå No query ID found in path, resetting');
        setQueryId(undefined);
      }
    }
  }, []);

  // Ï¥àÍ∏∞ Î°úÎìú + Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù (SPA ÎùºÏö∞ÌåÖ)
  useEffect(() => {
    // Ï¥àÍ∏∞ URL ÌååÏã±
    handleUrlChange();
    
    // Î∏åÎùºÏö∞Ï†Ä Îí§Î°ú/ÏïûÏúºÎ°ú Í∞ÄÍ∏∞ Í∞êÏßÄ
    window.addEventListener('popstate', handleUrlChange);
    
    // DashboardÏóêÏÑú Î∞úÏÉùÏãúÌÇ§Îäî Ïª§Ïä§ÌÖÄ Ïù¥Î≤§Ìä∏ Í∞êÏßÄ
    const handleCustomRouteChange = () => {
      console.log('üîÑ Custom route change detected');
      handleUrlChange();
    };
    window.addEventListener('baroboard-route-change', handleCustomRouteChange);
    
    // cleanup
    return () => {
      window.removeEventListener('popstate', handleUrlChange);
      window.removeEventListener('baroboard-route-change', handleCustomRouteChange);
    };
  }, [handleUrlChange]);

  // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏
  useEffect(() => {
    console.log('üè† Home page - Auth check:', { isLoading, user: user?.isLoggedIn, email: user?.email });
    
    if (!isLoading && !user?.isLoggedIn) {
      console.log('‚ùå Home page - User not logged in, redirecting to login');
      router.push('/login');
    } else if (!isLoading && user?.isLoggedIn) {
      console.log('‚úÖ Home page - User is logged in');
    }
  }, [user, isLoading, router]);

  // API Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ìï®Ïàò
  const fetchPageData = useCallback(async (page: number = 1) => {
    if (!user?.isLoggedIn) return;

    try {
      apiData.setLoading(true);
      const result = await fetchMainPageData(page, user.email, user.session);
      apiData.setMainPageData(result);
    } catch (error) {
      apiData.setError(error instanceof Error ? error.message : 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  }, [user?.isLoggedIn, user?.email, user?.session, apiData]);

  // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const initializeMainPage = async () => {
      if (hasInitialized || isLoading || !user?.isLoggedIn) {
        if (!isLoading) setIsInitializing(false);
        return;
      }

      setHasInitialized(true);
      setIsInitializing(false);
      await fetchPageData(1);
    };

    initializeMainPage();
  }, [user?.isLoggedIn, isLoading, hasInitialized, fetchPageData]);

  if (isLoading || isInitializing) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin w-8 h-8 border-4 border-primary-main border-t-transparent rounded-full mx-auto mb-4"></div>
          <p className="text-text-secondary">
            {isLoading ? 'Î°úÎî© Ï§ë...' : 'Ï¥àÍ∏∞Ìôî Ï§ë...'}
          </p>
        </div>
      </div>
    );
  }

  if (!user?.isLoggedIn) {
    return null; // Î¶¨Îã§Ïù¥Î†âÌä∏ Ï§ë
  }

  return <Dashboard apiData={apiData} onPageChange={fetchPageData} initialQueryId={queryId} />;
}
